// Generated by CoffeeScript 1.9.3
var Model;

Model = (function() {
  var CCS, builddbvalue, buildkeys, checkdata, ergodicdata, getdatabyajax, getdbdata, getformvalue, gethtmlstring, htmlstring, judgeother, jundgerequire, reqcontainer, reqevent;

  function Model(tablename1, target1, editid1) {
    this.tablename = tablename1;
    this.target = target1;
    this.editid = editid1;
    this.inputnames = [];
  }

  CCS = {
    color: {
      'R': '红',
      'OR': '橙红',
      'O': '橙',
      'OY': '橙黄',
      'Y': '黄',
      'YG': '黄绿',
      'G': '绿',
      'BG': '蓝绿',
      'B': '蓝',
      'BV': '青紫',
      'V': '紫罗兰',
      'VR': '紫红'
    },
    light: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    pure: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  };

  htmlstring = '';

  reqcontainer = {};

  jundgerequire = function(target) {
    var mend, storeobj;
    if (target.require !== void 0) {
      mend = "style='display:none'";
      storeobj = reqcontainer["" + target.require.name];
      if (storeobj === void 0) {
        storeobj = {};
      }
      storeobj["" + target.name] = "" + target.require.value;
      reqcontainer["" + target.require.name] = storeobj;
    } else {
      mend = "";
    }
    return mend;
  };

  getdatabyajax = function(url) {
    return $.ajax({
      url: url,
      dataType: 'json',
      async: false
    }).done(function(data) {
      return data;
    }).fail(function() {
      return 0;
    });
  };

  buildkeys = function(value, target) {
    var a, j, len1;
    for (j = 0, len1 = target.length; j < len1; j++) {
      a = target[j];
      if (a === value) {
        return target;
      }
    }
    target.push(value);
    return target;
  };

  gethtmlstring = function(data, id) {
    var i, j, k, l, len1, len2, ref, ref1, ref2, selects, str, str_color, str_end, str_light, str_pure, tmp, type, v, value;
    type = data.type;
    value = data.defaultValue;
    if (value === 'null' || value === void 0) {
      value = "";
    }
    if (type === 'input') {
      str = "<input type='text' id='" + id + "' data-type='input' class='input' name='" + id + "' value='" + value + "'/>";
    } else if (type === 'select') {
      tmp = "";
      tmp += "<select name='" + id + "' id='" + id + "' data-type='select' class='chosen-select'>";
      selects = data.option;
      for (k in selects) {
        v = selects[k];
        tmp += "<option value='" + v + "' class='" + id + "_" + k + "'>" + v + "</option>";
      }
      str = tmp + "</select>";
    } else if (type === 'selectmult') {
      tmp = "";
      tmp += "<select name='" + id + "' id='" + id + "' data-type='selectmult' class='chosen-select' multiple>";
      selects = data.option;
      for (k in selects) {
        v = selects[k];
        tmp += "<option value='" + v + "' class='" + id + "_" + k + "'>" + v + "</option>";
      }
      str = tmp + "</select>";
    } else if (type === 'CCS') {
      str_color = "<div class='ccs_color s_show'>颜色<select name='" + id + "_color' class='CCS ccscolor' id='" + id + "_color'>";
      str_light = "<div class='ccs_light s_show'>亮度<select name='" + id + "_light' class='CCS ccslight' id='" + id + "_light'>";
      str_pure = "<div class='css_pure s_show'>纯度<select name='" + id + "_pure' class='CCS ccspure' id='" + id + "_pure'>";
      str_end = "</select></div>";
      ref = CCS.color;
      for (k in ref) {
        v = ref[k];
        str_color += "<option value='" + k + "'>" + v + "</option>";
      }
      str_color += str_end;
      ref1 = CCS.light;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        i = ref1[j];
        str_light += "<option value='" + i + "'>" + i + "</option>";
      }
      str_light += str_end;
      ref2 = CCS.pure;
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        i = ref2[l];
        str_pure += "<option value='" + i + "'>" + i + "</option>";
      }
      str_pure += str_end;
      str = ("<div id='" + id + "' data-type='CCS'>") + str_color + str_light + str_pure + "</div>";
    } else if (type === 'inputornull') {
      tmp = "";
      tmp += "<select name='" + id + "' id='" + id + "' data-type='inputornull' class='chosen-select inputornull'>";
      selects = data.option;
      for (k in selects) {
        v = selects[k];
        if (v === "有" || v === '其他') {
          tmp += "<option value='" + v + "' class='" + id + "_" + k + " other'>" + v + "</option>";
        } else {
          tmp += "<option value='" + v + "' class='" + id + "_" + k + "'>" + v + "</option>";
        }
      }
      str = tmp + ("<input type='text' class='otherdata " + id + "_other' />");
    } else if (type === 'selectmultornull') {
      tmp = "<input id='" + id + "' name='" + id + "' data-type='selectmultornull' class='selectmultornull' type='checkbox'>有<br/><select name='" + id + "_other' class='chosen-select otherdata " + id + "_other' multiple>";
      selects = data.option;
      for (k in selects) {
        v = selects[k];
        tmp += "<option value='" + v + "' class='" + id + "_" + k + "'>" + v + "</option>";
      }
      str = tmp + "</select>";
    } else if (type === 'boolean') {
      str = "<div id='" + id + "' data-type='boolean' ><input type='radio' name='" + id + "' value='true'/>是 <input type='radio' name='" + id + "' value='false'/>否</div>";
    } else {
      str = '';
    }
    return str;
  };

  ergodicdata = function(modeldata, position, inputnames) {
    var i, j, len, mend, ref, results, str, target, title;
    target = modeldata[position];
    if (target.forend !== void 0 && target.fields === void 0) {
      title = target.namezh;
      str = gethtmlstring(target.forend, target.name);
      inputnames = buildkeys(target.name, inputnames);
      mend = jundgerequire(target);
      htmlstring += "<div class='list' " + mend + "> <div class='note'> <h5>" + title + "</h5> </div> <div class='shuru'> " + str + " </div> </div>";
    } else {
      len = target.fields.length;
      results = [];
      for (i = j = 0, ref = len; j < ref; i = j += 1) {
        if (i === 0) {
          title = target.namezh;
          mend = jundgerequire(target);
          htmlstring += "<div id='" + target.name + "' " + mend + "> <h3>" + title + "</h3>";
        }
        ergodicdata(target.fields, i, inputnames);
        if (i === len - 1) {
          results.push(htmlstring += "</div><div class='clear'></div><hr />");
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  judgeother = function(point) {
    var check, flag, id, input, j, len1, ref, t, type, value;
    id = point.id;
    type = point.name;
    check = point.type;
    flag = 0;
    if (check === 'checkbox') {
      id = $("." + type + "_other").attr('id');
      input = $("#" + id + "_chzn");
      if ($(point).prop('checked')) {
        flag = 1;
      } else {
        flag = 0;
      }
    } else {
      input = $("." + type + "_other");
      value = $(point).val();
      if (value !== null) {
        if (typeof value === 'string') {
          if (value === "其他" || value === "有") {
            flag = 1;
          }
        } else if (typeof value === 'object') {
          ref = $(point).val();
          for (j = 0, len1 = ref.length; j < len1; j++) {
            t = ref[j];
            if (t === "其他" || t === "有") {
              flag = 1;
            }
          }
        } else {
          flag = 0;
        }
      }
    }
    if (flag) {
      input.css('display', 'inline-block');
    } else {
      input.css('display', 'none');
    }
    return $(point).on("change", function() {
      var l, len2, ref1;
      flag = 0;
      if (check === 'checkbox') {
        id = $("." + type + "_other").attr('id');
        input = $("#" + id + "_chzn");
        if ($(point).prop('checked')) {
          flag = 1;
        } else {
          flag = 0;
        }
      } else {
        input = $("." + type + "_other");
        value = $(point).val();
        if (value !== null) {
          if (typeof value === 'string') {
            if (value === "其他" || value === "有") {
              flag = 1;
            }
          } else if (typeof value === 'object') {
            ref1 = $(point).val();
            for (l = 0, len2 = ref1.length; l < len2; l++) {
              t = ref1[l];
              if (t === "其他" || t === "有") {
                flag = 1;
              }
            }
          } else {
            flag = 0;
          }
        }
      }
      if (flag) {
        return input.css('display', 'inline-block');
      } else {
        return input.css('display', 'none');
      }
    });
  };

  builddbvalue = function(type, idp) {
    var color, dbvalue, i, j, l, len1, len2, light, othervalue, pure, target, value;
    dbvalue = "";
    if (type === ('input' || 'boolean' || 'select')) {
      value = $("#" + idp).val();
      if (value !== ("" || void 0)) {
        dbvalue = "" + value;
      }
    } else if (type === 'selectmult') {
      value = $("#" + idp).val();
      if (value instanceof Array) {
        dbvalue = "";
        for (j = 0, len1 = value.length; j < len1; j++) {
          i = value[j];
          dbvalue += i + "&";
        }
      }
    } else if (type === 'CCS') {
      color = $("select[name=" + i + "_color]").val();
      light = $("select[name=" + i + "_light]").val();
      pure = $("select[name=" + i + "_pure]").val();
      dbvalue += color + "&" + light + "&" + pure;
    } else if (type === 'selectmultornull') {
      target = $("input#" + idp + "[type=checkbox]");
      dbvalue = "";
      if (target.prop('checked')) {
        value = $("select[name=" + idp + "_other]").val();
        if (value instanceof Array) {
          for (l = 0, len2 = value.length; l < len2; l++) {
            i = value[l];
            dbvalue += i + "&";
          }
        } else {
          dbvalue = "null";
        }
      } else {
        dbvalue = "null";
      }
    } else if (type === 'inputornull') {
      dbvalue = "";
      value = $("#" + idp).val();
      if (value === ('其他' || '有')) {
        othervalue = $("#" + idp + "_other").val();
        if (othervalue === ("" || null)) {
          dbvalue += value + "-";
        } else {
          dbvalue += value + "-" + othervalue;
        }
      } else if (value !== ("" || void 0)) {
        dbvalue += "" + value;
      }
    }
    return dbvalue;
  };

  getformvalue = function(form, inputnames, editid) {
    var data, i, j, len1, result, type;
    data = {
      "id": editid
    };
    for (j = 0, len1 = inputnames.length; j < len1; j++) {
      i = inputnames[j];
      type = $("#" + i).data('type');
      result = builddbvalue(type, i);
      data[i] = result;
    }
    return data;
  };

  checkdata = function(value, key) {
    var match, type, values;
    type = $("#" + key).data('type');
    if (type === 'input') {
      $("#" + key).val(value);
      return true;
    } else if (type === 'select') {
      $("#" + key).val(value);
      return true;
    } else if (type === 'selectmult') {
      if (value !== "") {
        values = value.split("&");
        $("#" + key).val(values);
      } else {
        $("#" + key).val("");
      }
      return true;
    } else if (type === 'CCS') {
      values = value.split("&");
      $("#" + key + "_color").val(values[0]);
      $("#" + key + "_light").val(values[1]);
      $("#" + key + "_pure").val(values[2]);
      return true;
    } else if (type === 'inputornull') {
      if (value !== "") {
        match = /\-/g;
        if (match.test(value)) {
          values = value.split("-");
          $("#" + key).val(values[0]);
          $("#" + key + "_other").val(values[1]);
          $("#" + key + "_other").css('display', 'inline-block');
        } else {
          $("#" + key).val(value);
        }
      } else {
        $("#" + key).val(value);
      }
      return true;
    } else if (type === 'selectmultornull') {
      if (value !== "null") {
        values = value.split("&");
        $("#" + key).prop('checked', true);
        $("#" + key + "_other").val(values);
        $("#" + key + "_other").css('display', 'inline-block');
      } else {
        $("#" + key).prop('checked', false);
      }
      return true;
    } else if (type === 'boolean') {
      $("#" + key + " input[value=" + value + "]").prop('checked', 'true');
      return true;
    } else {
      return false;
    }
  };

  getdbdata = function(tablename, id) {
    var dbdata, k, result, url, v, value;
    url = "/input/get/" + tablename + "/" + id;
    dbdata = getdatabyajax(url).responseJSON;
    console.log(dbdata);
    for (k in dbdata) {
      v = dbdata[k];
      if (k === 'id') {
        continue;
      }
      if (v !== null) {
        value = v;
      } else {
        value = "";
      }
      result = checkdata(value, k);
      if (!result) {
        console.log('不匹配');
      }
    }
    return jQuery.getScript("/script/chosen.jquery.js").done(function() {
      var _id, dom, herd, i, j, l, len1, len2, len3, m, ref, ref1, results;
      $('.chosen-select').chosen();
      herd = $(".selectmultornull");
      for (j = 0, len1 = herd.length; j < len1; j++) {
        i = herd[j];
        id = $(i).attr('id');
        _id = $("." + id + "_other").attr('id');
        $("#" + _id + "_chzn").css("display", "none");
      }
      ref = $(".inputornull");
      for (l = 0, len2 = ref.length; l < len2; l++) {
        dom = ref[l];
        judgeother(dom);
      }
      ref1 = $(".selectmultornull");
      results = [];
      for (m = 0, len3 = ref1.length; m < len3; m++) {
        dom = ref1[m];
        results.push(judgeother(dom));
      }
      return results;
    }).fail(function() {
      return alert("动态脚本加载失败");
    });
  };

  reqevent = function(index, condition, target) {
    var datatype, flag, i, j, len1, obj, ref, value;
    datatype = $("#" + index).data('type');
    if (datatype === 'boolean') {
      obj = $("#" + index + " input[value=" + condition + "]");
      if (obj.prop('checked')) {
        $("#" + target).css('display', 'inline-block');
      } else {
        $("#" + target).css('display', 'none');
      }
      return obj.on('click', function() {
        if ($(this).prop('checked')) {
          return $("#" + target).css('display', 'inline-block');
        } else {
          return $("#" + target).css('display', 'none');
        }
      });
    } else if (datatype === 'select') {
      obj = $("#" + index);
      if (obj.val() === condition) {
        $("#" + target).css('display', 'inline-block');
      } else {
        $("#" + target).css('display', 'none');
      }
      return obj.on("change", function() {
        if ($(this).val() === condition) {
          return $("#" + target).css('display', 'inline-block');
        } else {
          return $("#" + target).css('display', 'none');
        }
      });
    } else if (datatype === 'selectmult') {
      obj = $("#" + index);
      value = obj.val();
      flag = 0;
      ref = obj.val();
      for (j = 0, len1 = ref.length; j < len1; j++) {
        i = ref[j];
        if (i = condition) {
          flag = 1;
          break;
        }
      }
      if (flag) {
        $("#" + target).css('display', 'inline-block');
      } else {
        $("#" + target).css('display', 'none');
      }
      return obj.on("change", function() {
        var l, len2, ref1;
        flag = 0;
        ref1 = obj.val();
        for (l = 0, len2 = ref1.length; l < len2; l++) {
          i = ref1[l];
          if (i = condition) {
            flag = 1;
            break;
          }
        }
        if (flag) {
          return $("#" + target).css('display', 'inline-block');
        } else {
          return $("#" + target).css('display', 'none');
        }
      });
    }
  };

  Model.prototype.init = function() {
    var a, b, condition, finalhtmlstring, i, index, j, k, len, modeldata, ref, results, target, v;
    modeldata = getdatabyajax("/input/field/" + this.tablename).responseJSON;
    len = modeldata.length;
    for (i = j = 0, ref = len; j < ref; i = j += 1) {
      ergodicdata(modeldata, i, this.inputnames);
    }
    finalhtmlstring = htmlstring;
    $("#" + this.target).append(finalhtmlstring);
    getdbdata(this.tablename, this.editid);
    results = [];
    for (k in reqcontainer) {
      v = reqcontainer[k];
      index = k;
      results.push((function() {
        var results1;
        results1 = [];
        for (a in v) {
          b = v[a];
          condition = b;
          target = a;
          results1.push(reqevent(index, condition, target));
        }
        return results1;
      })());
    }
    return results;
  };

  Model.prototype.savedata = function() {
    var result, that;
    result = getformvalue(this.target, this.inputnames, this.editid);
    that = this;
    return $.post("/input/update/" + this.tablename, result, function(data) {
      alert('保存成功');
      return getdbdata(that.tablename, that.editid);
    });
  };

  return Model;

})();
